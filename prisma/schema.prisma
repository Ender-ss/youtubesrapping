// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  monitoringConfigs MonitoringConfig[]
  reports           DailyReport[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model YouTubeChannel {
  id              String   @id @default(cuid())
  channelId       String   @unique
  title           String
  description     String?
  customUrl       String?
  publishedAt     DateTime
  thumbnailUrl    String?
  bannerUrl       String?
  country         String?  @default("US")
  language        String?  @default("en")
  subscriberCount Int      @default(0)
  videoCount      Int      @default(0)
  viewCount       Int      @default(0)
  isActive        Boolean  @default(true)
  lastScrapedAt   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  videos           YouTubeVideo[]
  monitoringConfigs MonitoringConfig[]
  screenshots       ChannelScreenshot[]
  reports          DailyReport[]
}

model YouTubeVideo {
  id              String   @id @default(cuid())
  videoId         String   @unique
  channelId       String
  title           String
  description     String?
  thumbnailUrl    String?
  publishedAt     DateTime
  duration        Int?     // em segundos
  viewCount       Int      @default(0)
  likeCount       Int      @default(0)
  commentCount    Int      @default(0)
  language        String?  @default("en")
  tags            String?  // JSON string de tags
  categoryId      String?
  isActive        Boolean  @default(true)
  lastScrapedAt   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  channel        YouTubeChannel       @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
  transcriptions VideoTranscription[]
  reports        DailyReport[]
}

model MonitoringConfig {
  id               String   @id @default(cuid())
  userId           String
  channelId        String
  isActive         Boolean  @default(true)
  minSubscriberCount Int    @default(1000)
  minViewCount     Int      @default(10000)
  maxChannelAge    Int      @default(30) // em dias
  keywords         String?  // JSON string de keywords para busca
  notificationEmail String?
  lastRunAt        DateTime?
  nextRunAt        DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel YouTubeChannel @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
}

model DailyReport {
  id              String   @id @default(cuid())
  userId          String?
  channelId       String?
  reportDate      DateTime @default(now())
  reportType      String   @default("trending") // trending, monitored, custom
  title           String
  summary         String
  insights        String?  // JSON string com insights da IA
  channelsData    String?  // JSON string com dados dos canais
  videosData      String?  // JSON string com dados dos vídeos
  screenshotUrls  String?  // JSON string de URLs de screenshots
  isSent          Boolean  @default(false)
  sentAt          DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user    User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel YouTubeChannel? @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
  videos  YouTubeVideo[]
}

model VideoTranscription {
  id          String   @id @default(cuid())
  videoId     String
  language    String   @default("en")
  transcript  String   // texto transcrito
  summary     String?  // resumo gerado por IA
  insights    String?  // insights gerados por IA
  confidence  Float?   @default(0.0)
  duration    Int?     // duração em segundos
  isProcessed Boolean  @default(false)
  processedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  video YouTubeVideo @relation(fields: [videoId], references: [videoId], onDelete: Cascade)
}

model ChannelScreenshot {
  id          String   @id @default(cuid())
  channelId   String
  screenshotUrl String
  thumbnailUrl  String?
  description String?
  screenshotType String @default("channel") // channel, video, analytics
  fileSize    Int?
  width       Int?
  height      Int?
  createdAt   DateTime @default(now())

  channel YouTubeChannel @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
}